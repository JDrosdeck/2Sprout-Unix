/*THIS IS AN UNPUBLISHED WORK CONTAINING 2SPROUT INC CONFIDENTIAL AND PROPRIETARY INFORMATION. DISCLOSURE, USE, OR REPRODUCTION WITHOUT AUTHORIZATION OF 2SPROUT INC IS STRICTLY PROHIBITED.*/#include <stdio.h>#include <stdlib.h>#include <unistd.h>#include <errno.h>#include <string.h>#include <iostream>#include <ctype.h>#include <sys/stat.h>#include <fcntl.h>#include <fstream>#include <sys/types.h>#include <unistd.h>#include <cstdlib>#define sproutPipe "/tmp/2sprout"#define feedPipe "/tmp/2sproutAPI"using namespace std;int startFeed(){		int fd,n;	char buffer[50];	n = sprintf(buffer, "startFeed");	fd = open(sproutPipe, O_WRONLY);	write(fd, buffer, strlen(buffer));	close(fd);	return 1;}int stopFeed(){	int fd,n;	char buffer[50];	n = sprintf(buffer, "stopFeed");	fd = open(sproutPipe, O_WRONLY);	write(fd, buffer, strlen(buffer));	close(fd);	return 1;}int getFeed(){	int fd,n;	char buffer[50];	n = sprintf(buffer, "getFeed");	fd = open(sproutPipe, O_WRONLY);	write(fd, buffer, strlen(buffer));	printf("getFeed api call complete");	close(fd);	return 1;}char * getSproutItem(){	int fd1, numread;	char bufpipe[4];	//string s;	int x = 0;			while(1)		{			fd1 = open(feedPipe, O_RDONLY);			numread = read(fd1,bufpipe, 4);			if(numread > 1)			{				printf("READ: %i\n", numread);				x++;				printf("X: %i\n", x);				bufpipe[numread] = '\0';				string temp = bufpipe;				int pos = temp.find("^");				if(pos != string::npos)				{					temp = temp.substr(0, pos);				}										int sizeOfString = atoi(bufpipe);				char feedWord[sizeOfString];				int numRead1 = read(fd1, feedWord, sizeOfString);				string sproutItem;				if(numRead1 > 1)				{										feedWord[sizeOfString] = '\0';					sproutItem = feedWord;				}								close(fd1);				return (char *)sproutItem.c_str();			}		}				}